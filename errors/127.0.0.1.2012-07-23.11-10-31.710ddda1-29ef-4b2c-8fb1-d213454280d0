(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'ratings'"
p3
sS'layer'
p4
S'/home/goshawk/web2py/applications/milo/models/db.py'
p5
sS'code'
p6
S"# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    db = DAL('postgres://milo:milosecret@localhost/milo-reloaded')\nelse:\n    ## connect to Google BigTable (optional 'google:datastore://namespace')\n    db = DAL('google:datastore')\n    ## store sessions and tickets there\n    session.connect(request, response, db = db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be 'controller/function.extension'\nresponse.generic_patterns = ['*'] if request.is_local else []\n## (optional) optimize handling of static files\n# response.optimize_css = 'concat,minify,inline'\n# response.optimize_js = 'concat,minify,inline'\n\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Crud, Service, PluginManager, prettydate\nauth = Auth(db, hmac_key=Auth.get_or_create_key())\ncrud, service, plugins = Crud(db), Service(), PluginManager()\n\n## create all tables needed by auth if not custom tables\nauth.define_tables()\n\n## configure email\nmail=auth.settings.mailer\nmail.settings.server = 'logging' or 'smtp.gmail.com:587'\nmail.settings.sender = 'you@gmail.com'\nmail.settings.login = 'username:password'\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, write your domain:api_key in private/janrain.key\nfrom gluon.contrib.login_methods.rpx_account import use_janrain\nuse_janrain(auth,filename='private/janrain.key')\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table('mytable',Field('myfield','string'))\n##\n## Fields can be 'string','text','password','integer','double','boolean'\n##       'date','time','datetime','blob','upload', 'reference TABLENAME'\n## There is an implicit 'id integer autoincrement' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield='value')\n## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\nimport imdb\n\nimdb_connection_str = 'postgres://imdb:imdbsecret@localhost/imdb'\n\nimsql = imdb.IMDb('sql', uri=imdb_connection_str)\n\nim = imdb.IMDb()\n\ndb.define_table('users',\n        Field('name'),\n        Field('email'),\n        Field('imdb_id', 'integer')\n        )\n\n#    genre = ListField(StringField())\n#    comments = ListField(EmbeddedDocumentField(Comment))\n#    cast = ListField(EmbeddedDocumentField(Person()))\n#    director = ListField(EmbeddedDocumentField(Person()))\n#    keywords = ListField(Stringfield())\n\ndb.define_table('genres',\n        Field('name')\n        )\n\n\ndb.define_table('persons',\n        Field('first_name'),\n        Field('last_name'),\n        Field('birth', 'datetime')\n        )\n\ndb.define_table('movies',\n        Field('imdb_id', 'integer'),\n        Field('title'),\n        Field('poster', 'text'),\n        Field('trailer', 'text'),\n        Field('plot', 'text'),\n        Field('date', 'datetime')\n        )\n\ndb.define_table('comments',\n        Field('movie', db.movies, requires = IS_IN_DB(db, 'movies.id', db.movies._format)),\n        Field('title'),\n        Field('text', 'text'),\n        Field('rating', db.ratings, requires = IS_IN_DB(db, 'ratings.id', db.ratings._format)),\n        Field('timestamp', 'datetime'),\n        )\n\ndb.define_table('roles',\n        Field('name')\n        )\n\ndb.define_table('cast',\n        Field('movie', db.movies, requires = IS_IN_DB(db, 'movies.id', db.movies._format)),\n        Field('person', db.persons, requires = IS_IN_DB(db, 'persons.id', db.persons._format)),\n        Field('role', db.roles, requires = IS_IN_DB(db, 'roles.id', db.roles._format))\n        )\n\ndb.define_table('ratings',\n        Field('iuser', db.users, requires = IS_IN_DB(db,'users.id',db.users._format)),\n        Field('imovie', db.movies, requires = IS_IN_DB(db,'movies.id',db.movies._format)),\n        Field('rating', 'double')\n        )\n\nmovies_with_ratings = (db.movies.id.belongs(db(db.ratings)._select(db.ratings.imovie, distinct=db.ratings.imovie)))\nmovies_with_titles = ~(db.movies.title==None)\nwith_poster = ~(db.movies.poster==None)\n\n#for x in db(db.ratings).select(db.ratings.ALL):\n#    for y in db(db.ratings.id>x.id).select(db.ratings.ALL):\n#        if y.iuser == x.iuser and y.imovie == x.imovie:\n#            y.delete_record()\n#    db.commit()\n\n#run only once\n#db.executesql('CREATE UNIQUE INDEX iuser_imovie ON ratings (iuser,imovie);')\n\n\ndb.define_table('features',\n        Field('name'),\n        Field('type')\n        )\n\ndb.define_table('movies_features',\n        Field('movie', db.movies, requires = IS_IN_DB(db,'movies.id',db.movies._format)),\n        Field('feature', db.features, requires = IS_IN_DB(db,'features.id',db.features._format)),\n        Field('times', 'integer')\n        )\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/goshawk/web2py/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/home/goshawk/web2py/applications/milo/models/db.py", line 126, in <module>\n    Field(\'rating\', db.ratings, requires = IS_IN_DB(db, \'ratings.id\', db.ratings._format)),\n  File "/home/goshawk/web2py/gluon/dal.py", line 6343, in __getattr__\n    return self[key]\n  File "/home/goshawk/web2py/gluon/dal.py", line 6337, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'ratings\'\n'
p11
s.