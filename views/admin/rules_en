<h2>Good Form Rules for Custom Recommender Algorithms</h2>
<div class="box">
  <table>
		<tbody>
			Main good form rules for both functions:<br>
•	Both functions have to be written in Matlab language, so they have also to respect its syntax or may be generate errors
causing crash on execution<br>
•	Both functions must have <cite>.mat</cite> as file extension or the system won't recognize them<br>
•	Filenames don't have any restriction (in any case, the system will store them using default filenames, based on the name chosen by the manager to indentify the algorithm); it's not the same instead for function filenames, that have to follow the seguent rules<br><br>

Main good form rules for creating-model function:<br>
•	Function filename must follow this paradigm <cite>createModel_algname</cite>, where <cite>algname</cite> have to be replaced with the algorithm's identifier name<br>
•	Function delcaration has to follow this structure:<br>
<cite>function [model] = createModel_algname (URM,ICM, modelParam)</cite><br>
Where <cite>model</cite> is the output model, <cite>URM</cite> is the User Rating Matrix, <cite>ICM</cite> is the Item Content Matrix (the system owns both matrices and these are passed as parameters), and at last<cite>modelParam</cite>, that contains additional parameters that may be useful for the model creation<br>
•	The function must build his model and synthesize it to a monodimensional Matlab vector, which variable name have to be something like this: <cite>model.algname</cite><br><br>

Main good form rules for recommender function:<br>
•	Function filename must follow this paradigm <cite>onLineRecom_algname</cite>, where <cite>algname</cite> have to be replaced with the algorithm's identifier name<br>
•	Function delcaration has to follow this structure:<br>
	<cite>function [recomList] = onLineRecom_algname (userProfile, model, param)</cite><br>
Where <cite>recomList</cite> is the output, that is the film list chosen as recommendations, <cite>userProfile</cite> is a monodimensional vector containing the ratings of the user for which the system is searching for recommendations, <cite>model</cite> is the model created by the creating-model function for algorithm in question, while <cite>param</cite> contains additional parameters, among which in particular <cite>param.postProcessingFunction</cite> is the handle of post-processing function (used in output)<br>

•	The function has to work with the monodimensional vector passed by the model and choose, through the method it considers more worthwhile, a list of films considered appropriate as recommendation for that specific user; the variable <cite>recomList</cite>, even it a monodimensional vector, have to be assigned in this sense before the final return phase so that it contains that informations<br>
•	At least, the function has to contain these control codelines:<br>
<pre>
	<cite>if (nargin>=3)
		&#1;if(isfield(param,'postProcessingFunction'))
			&#1;&#1;recomList=feval(param.postProcessingFunction,recomList,param);
		&#1;end
	end</cite>
</pre>
	The array variable <cite>recomList</cite> contains the names of the films to recommend to the user.

		</tbody>

	</table>
</div>
<br>
<div id="message">

</div>
